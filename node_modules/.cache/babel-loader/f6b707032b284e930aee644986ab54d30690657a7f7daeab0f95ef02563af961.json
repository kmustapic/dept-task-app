{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n/**\r\n * State hook that syncs with localStorage.\r\n * @param {string} key localStorage key\r\n * @param {any} defaultValue default state if none in storage\r\n * @returns {[any, function]} [value, setValue]\r\n */\nexport function useLocalStorage(key, defaultValue) {\n  _s();\n  const [value, setValue] = useState(() => {\n    try {\n      const stored = localStorage.getItem(key);\n      return stored != null ? JSON.parse(stored) : defaultValue;\n    } catch {\n      return defaultValue;\n    }\n  });\n  useEffect(() => {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch {\n      // ignore write errors\n    }\n  }, [key, value]);\n  return [value, setValue];\n}\n\n// useContext hook would be more appropriate for future app development\n// now is still ok to implement local storage logic this way\n_s(useLocalStorage, \"XGze+C8OoDEkrNYgOkrwYxAtmq8=\");","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","defaultValue","_s","value","setValue","stored","localStorage","getItem","JSON","parse","setItem","stringify"],"sources":["C:/Users/Korisnik/Desktop/Kristina/TEMP FAKS/dept-task-app/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * State hook that syncs with localStorage.\r\n * @param {string} key localStorage key\r\n * @param {any} defaultValue default state if none in storage\r\n * @returns {[any, function]} [value, setValue]\r\n */\r\nexport function useLocalStorage(key, defaultValue) {\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem(key);\r\n      return stored != null ? JSON.parse(stored) : defaultValue;\r\n    } catch {\r\n      return defaultValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(key, JSON.stringify(value));\r\n    } catch {\r\n      // ignore write errors\r\n    }\r\n  }, [key, value]);\r\n\r\n  return [value, setValue];\r\n}\r\n\r\n// useContext hook would be more appropriate for future app development\r\n// now is still ok to implement local storage logic this way\r\n\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,MAAM;IACvC,IAAI;MACF,MAAMQ,MAAM,GAAGC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC;MACxC,OAAOK,MAAM,IAAI,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,GAAGJ,YAAY;IAC3D,CAAC,CAAC,MAAM;MACN,OAAOA,YAAY;IACrB;EACF,CAAC,CAAC;EAEFH,SAAS,CAAC,MAAM;IACd,IAAI;MACFQ,YAAY,CAACI,OAAO,CAACV,GAAG,EAAEQ,IAAI,CAACG,SAAS,CAACR,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,MAAM;MACN;IAAA;EAEJ,CAAC,EAAE,CAACH,GAAG,EAAEG,KAAK,CAAC,CAAC;EAEhB,OAAO,CAACA,KAAK,EAAEC,QAAQ,CAAC;AAC1B;;AAEA;AACA;AAAAF,EAAA,CAtBgBH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}